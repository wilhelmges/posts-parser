додаток буде фікситись

render deploy command: hypercorn app:app --reload   --bind 0.0.0.0:$PORT

Формування дайджесту складається з наступних етапів:
    - отримання постів(потенційних анонсів) з різних джерел
    - відбір постів, які містять саме анонси. робиться людиною яка переглядає тексти анонсів
    - за допомогою chatgpt api для кожного з анонсів формується коротке резюме на 1-2 параграфи і вираховується дата самої події
    - людина переглядає згенеровані chatgpt результає і при необхідності коригує
    - запускається скрипт, який публікує пости з анонсів в кілька чатів
    - дайджест, що відноситься до вечірок в Києві пересилається в канал

    Система автоматизованого збору та публікації анонсів подій

1. ЗАГАЛЬНИЙ ОПИС
Система призначена для автоматизованого збору анонсів подій з різних джерел (Instagram, Telegram), їх обробки та публікації у відповідних каналах. Основний фокус - танцювальні події, культурні заходи та церковні зібрання.

2. КОМПОНЕНТИ СИСТЕМИ

2.1 Збирачі даних (Парсери):
- Instagram парсер (використовує Puppeteer)
- Telegram парсер
- Система автентифікації для доступу до закритих джерел

2.2 База даних (Supabase):
- Таблиця posts (зберігання постів)
- Таблиця sources (джерела контенту)
- Система категоризації контенту

2.3 Обробники контенту:
- ChatGPT API для створення коротких описів
- Система визначення дат подій
- Модуль валідації контенту

2.4 Інтерфейс модерації:
- Веб-панель для перегляду постів
- Функції архівування та репостингу
- Система фільтрації за категоріями

2.5 Публікатор:
- Telegram API для публікації
- Система форматування дайджестів
- Розподіл по тематичних каналах

3. ПРОЦЕС РОБОТИ

3.1 Збір даних:
- Автоматичний збір постів з визначених джерел
- Первинна фільтрація за датою
- Збереження в базі даних

3.2 Модерація:
- Перегляд зібраних постів через веб-інтерфейс
- Відбір релевантних анонсів
- Маркування для публікації або архівування

3.3 Обробка:
- Створення коротких описів через GPT
- Визначення дати події
- Категоризація за містами та типами подій

3.4 Публікація:
- Формування тематичних дайджестів
- Розподіл по відповідних каналах
- Автоматична публікація за розкладом

4. ТЕХНІЧНИЙ СТЕК

4.1 Frontend:
- HTML/CSS (Bulma Framework)
- Alpine.js для реактивності
- Font Awesome для іконок

4.2 Backend:
- Python для парсерів та обробки
- Supabase для зберігання даних
- OpenAI API для генерації контенту

4.3 API:
- Telegram Bot API
- Instagram API (через веб-скрапінг)
- Supabase REST API

5. БЕЗПЕКА
- Шифрування критичних даних
- Токени доступу до API
- Система логування дій

6. МАСШТАБУВАННЯ
- Можливість додавання нових джерел
- Розширення категорій контенту
- Додавання нових каналів публікації