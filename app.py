from quart import Quart, render_template, jsonify
from quart_cors import cors
from telethon import TelegramClient
from telegram import Bot
import os
from babel.dates import format_datetime

from publisher import prepare_posts
from services.post_processor import calculate_event_possibility
from services.repository import supabase
from services.scan_tgsources import main as sts
from publisher import prepare_posts as pp
import datetime
from dotenv import load_dotenv; load_dotenv()# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
import traceback
import time

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –∫–ª—ñ—î–Ω—Ç–∞
api_id = int(os.getenv('TELEGRAM_API_ID'))
api_hash = os.getenv('TELEGRAM_API_HASH')
client = TelegramClient('vilyashko', api_id, api_hash)
# Use this if you're authenticating as a bot
bot = Bot(os.getenv('DANCEDIGEST_BOT_TOKEN'))

app = Quart(__name__)# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Quart –¥–æ–¥–∞—Ç–∫—É
app = cors(app)

@app.route('/')
async def index():
    return await render_template('index.html')

@app.route('/api/scan')
async def scan_sources():
    POST_LIMIT = 10
    """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    category = 'dance'  # –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É # –î–æ–¥–∞—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è category

    try:
        added = await sts(category=category, post_limit=POST_LIMIT)
        return jsonify({
            "status": "success",
            "added": added
        })
        
    except Exception as e:
        print(f"–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)} {e}")  # –¥–æ–¥–∞—Ç–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        traceback.print_exc()
        return jsonify({
            "status": "error",
            "message": f"error: {str(e)}"
        }), 500

@app.route('/api/prepare_posts')
async def prepare_posts():
    """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—é–º–µ –∞–Ω–æ–Ω—Å—ñ–≤"""
    try:
        processed = pp()
        return jsonify({
            "status": "success",
            "processed": processed
        })

    except Exception as e:
        print(str(e))
        return jsonify({
            "status": "error",
            "message": f"error: {str(e)}"
        }), 500
    
@app.route('/api/publishdigests')
async def publishdigests():
    """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –¥–∞–π–¥–∂–µ—Å—Ç—É"""
    try:
        if not client.is_connected():
            await client.connect()

        #locale.setlocale(locale.LC_TIME, 'uk_UA.UTF-8') #uk_UA.UTF-8 unsupported in render.com
        current = datetime.date.today()
        response = []
        group = '@opendance_life'
        cities = {"–ö–∏—ó–≤":69523} #, "–î–Ω—ñ–ø—Ä–æ": 75286 , "–õ—å–≤—ñ–≤": 75292, "–û–¥–µ—Å–∞": 75294, "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å":75417} #,
        for city in  cities:
            topic = cities[city]
            response = supabase.table('posts').select(
                "fulltext, event_date, brief, id").eq('status', 'readytopost').eq('city',city).eq('category', 'dance').gte('event_date', str(current)).order('event_date', desc=False).limit(20).execute().data
            print(city, topic, len(response))
            if len(response)<1:
                continue
            print('publishing '+city)

            client.parse_mode = 'html'
            num = 1
            digest = '–¥–∞–π–¥–∂–µ—Å—Ç –≤–µ—á—ñ—Ä–æ–∫ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å \n'
            if city == "–ö–∏—ó–≤":
                digest = digest + f"üíÉüï∫üèª –ø–æ–≤–Ω—ñ –∞–Ω–æ–Ω—Å–∏ –≤–µ—á—ñ—Ä–æ–∫ —É –ö–∏—î–≤—ñüèõÔ∏è, –í—ñ–Ω–Ω–∏—Ü—ñ‚öì, –•–º–µ–ª—å–Ω–∏—Ü—å–∫–æ–º—Éüèπ <strong>–∞–Ω–æ–Ω—Å–∏ –Ω–æ–±–æ—Ä—ñ–≤ –≤ —Å—Ç—É–¥—ñ—ó</strong>,  –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤ –≥—Ä—É–ø—ñ <a href='https://t.me/opendance_life'>—á–∞—Ç –∑ —Ç–∞–Ω—Ü—ñ–≤</a>, —Ç–∞–∫–æ–∂ —Ç—É—Ç –º–æ–∂–Ω–∞ –≥–ª—è–Ω—É—Ç–∏ –∞–Ω–æ–Ω—Å–∏ –ø—Ä–æ —Ç–∞–Ω—Ü—é–≤–∞–ª—å–Ω—ñ —Ñ–µ—Å—Ç–∏–≤–∞–ª—ñ\n\n"
                # digest = digest + f" —Ç–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ <b>–∞–Ω–æ–Ω—Å–∏ –ø–æ–¥—ñ–π –≤ instagram</b> https://www.instagram.com/vitodancedigest/"

            for repost in response:
                print(num, repost['brief'][:35])
                event_date = datetime.datetime.strptime(repost['event_date'], "%Y-%m-%d")
                formatted_date = format_datetime(event_date, "EEEE, d MMMM ", locale="uk")
                text = repost['brief'] if repost['brief'] else repost['fulltext']
                digest = digest + f"<strong>{formatted_date}</strong>\n {text}\n\n"
            print(digest)

            try:
                #await bot.send_message(chat_id='@test_tg_api_polytopic', message_thread_id=1, text='12345')
                #TODO: need to be fixed for other locations
                await bot.send_message(chat_id="@opendance_life", message_thread_id=77971, text=digest, parse_mode="HTML")
            except Exception as e:
                print(e, str(e))

        return jsonify({
            "status": "success",
            "message": "–î–∞–π–¥–∂–µ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ"
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": f"error: {str(e)}"
        }), 500

@app.route('/hello')
async def hello_world():
    return 'Hello from Quart!'

if __name__ == '__main__':
    client.loop.run_until_complete(app.run())
    #client.loop.run_until_complete(app.run(debug=(True if os.getenv('USER')=='rasser' else False)))
    #app.run(debug=(True if os.getenv('USER')=='rasser' else False))